language ESSENCE' 1.0

given MAX_OPS: int(1..)
given num_registers : int(0..)
given input: matrix indexed by [int(1..input_length)] of int(0..100)
given output: matrix indexed by [int(1..output_length)] of int(0..100)

$ Excludes initial state
letting STEPS be domain int(0..MAX_OPS)
letting STEPS1 be domain int(2..(MAX_OPS-1))
$letting hand be domain int(0..100)

letting IN_LEN be domain int(1..input_length)
letting OUT_LEN be domain int(1..output_length)
letting REG_NO be domain int(1..num_registers)

$letting out_count be 2
$letting in_count be 2

find inbox : matrix indexed by [STEPS,  IN_LEN] of int(-1..100)
find outbox: matrix indexed by [ STEPS, OUT_LEN ] of int(-1..100)
find hand  : matrix indexed by [ STEPS ] of int(-1..100)
find reg   : matrix indexed by [ STEPS , REG_NO ] of int(-1..100)

$NB using -1 as dummy var for null
such that


forAll o:OUT_LEN .
  outbox[0,o]= -1,

forAll r:REG_NO .
  reg[0,r]= -1,

forAll i:IN_LEN .
  inbox[0,i]= input[i],

hand[0] = -1,

$picks up object from conveyor for first move
forAll o:OUT_LEN .
  outbox[1,o]= -1,

forAll r:REG_NO .
  reg[1,r]= -1,

inbox[1,1]=-1,

(forAll i:int(2..input_length) .
  inbox[1,i] = input[i]),

(forAll i:OUT_LEN .
 outbox[MAX_OPS,i] = output[i]),

$picks up object from conveyor for first move
hand[1] = input[1],



$actions $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
forAll step: STEPS1 .
  $INBOX: from conveyor to hand
  (exists in_count: int(2..input_length).
   (inbox[step-1,in_count-1] <0 /\ inbox[step-1,in_count] >= 0)/\
    (forAll i:int(1..(input_length)) .
         (i!=in_count) -> (inbox[step,i] = inbox[step-1,i]))/\
      (inbox[step , in_count] = -1)/\
      (hand[step] = inbox[step-1,in_count])/\
       (forAll o:OUT_LEN .
         outbox[step,o] = outbox[step-1,o])/\
         (forAll r: REG_NO .
           reg[step,r] = reg[step-1,r])
       )

\/
  $OUTBOX
  (exists out_count: int(1..(output_length-1)) .
    ((outbox[step-1,out_count-1] >= 0 /\ outbox[step-1,out_count] <0)\/
    (outbox[step-1,1] <0 /\ out_count<2 )) /\
    (forAll o : OUT_LEN .
     (o != out_count) -> (outbox[step,o] = outbox[step-1,o]))/\
    (outbox[step, out_count] = hand[step-1])/\
    (forAll i:IN_LEN .
      inbox[step,i] = inbox[step-1,i])/\
      (hand[step] = hand[step-1])/\
      (forAll r: REG_NO .
        reg[step,r] = reg[step-1,r])
      )

\/
  $COPY TO -  hand to reg slot
  ((hand[step-1]!=-1)/\  $check hand is not empty
  (exists reg_pos: REG_NO .
   (reg[step,reg_pos] = hand[step-1] )/\
   (forAll r: REG_NO .
     (r!= reg_pos)->(reg[step,r] = reg[step-1,r]))/\
     (hand[step] = hand[step-1])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])
      ))


\/
  $COPY FROM - reg slot to hand
  ((num_registers>0)/\
  (exists reg_pos: REG_NO .
    (reg_pos!=-1)/\ $check reg slot is not empty
   (hand[step] = reg[step-1,reg_pos])/\
   (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])
      ))

\/
  $BUMP+ - reg slot to hand + 1
  ((num_registers>0)/\
  (exists reg_pos: REG_NO .
    (reg[step-1,reg_pos]!=-1)/\ $check that reg slot is not empty
   (hand[step] = reg[step-1,reg_pos]+1)/\
   (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])
      ))

\/
  $BUMP- - reg slot to hand - 1
  ((num_registers>0)/\
  (exists reg_pos: REG_NO .
    (reg[step-1,reg_pos]!=-1)/\ $check that reg slot is not empty
   (hand[step] = reg[step-1,reg_pos]-1)/\
   (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])
      ))

\/
  $ADD - reg slot value to hand value and add to hand
  ((num_registers>0)/\
  (exists reg_pos: REG_NO .
    ((hand[step-1]!=-1)/\(reg[step-1,reg_pos]!=-1))/\ $checks that hand nor slot are empty.
   (hand[step] = reg[step-1,reg_pos]+hand[step-1])/\
   (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])
      ))

\/
  $SUB - reg slot value to hand value and add to hand
  ((num_registers>0)/\
  (exists reg_pos: REG_NO .
    ((reg[step-1,reg_pos]<=hand[step-1])/\(reg[step-1,reg_pos]!=-1))/\ $checks that hand nor slot are empty.
   (hand[step] = hand[step-1] - reg[step-1,reg_pos])/\
   (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])
      ))
      ,

((outbox[MAX_OPS-1,output_length]!= output[output_length])/\
(outbox[MAX_OPS, output_length] = hand[MAX_OPS-1])/\
(forAll i:IN_LEN .
  inbox[MAX_OPS,i] = inbox[MAX_OPS-1,i])/\
(forAll o:int(1..(output_length-1)) .
    outbox[MAX_OPS,o] = outbox[MAX_OPS-1,o])/\
  (hand[MAX_OPS] = hand[MAX_OPS-1])/\
  (forAll r: REG_NO .
    reg[MAX_OPS,r] = reg[MAX_OPS-1,r])
  ),


true


$TODO use sum of 1D matrix to find critical output number
$TODO use "old school" split for reindexing instead of 
