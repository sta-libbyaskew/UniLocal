language ESSENCE' 1.0

given MAX_OPS: int(1..)
given num_registers : int(0..)
given input: matrix indexed by [int(1..input_length)] of int(0..100)
given output: matrix indexed by [int(1..output_length)] of int(0..100)

$ Excludes initial state
letting STEPS be domain int(0..MAX_OPS)
letting STEPS1 be domain int(1..MAX_OPS)

letting IN_LEN be domain int(1..input_length)
letting OUT_LEN be domain int(1..output_length)
letting REG_NO be domain int(1..num_registers)

$different integer value for each action at each step.
find action: matrix indexed by [int(1..MAX_OPS)] of int(1..8)
$Ordered and represents items in the inbox at each step.
find inbox : matrix indexed by [STEPS,  IN_LEN] of int(-1..100)
$Ordered and represents items in the outbox at each step.
find outbox: matrix indexed by [ STEPS, OUT_LEN ] of int(-1..100)
$Unordered an represents items in register slots at each step.
find hand  : matrix indexed by [ STEPS ] of int(-1..100)
$Represents item in player's hand at each step.
find reg   : matrix indexed by [ STEPS , REG_NO ] of int(-1..100)

such that

$target final state.
(forAll i:OUT_LEN .
 outbox[MAX_OPS,i] = output[i]),

forAll o:OUT_LEN .
  outbox[0,o]= -1,

forAll r:REG_NO .
  reg[0,r]= -1,

forAll i:IN_LEN .
  inbox[0,i]= input[i],

hand[0] = -1,


$actions
forAll step: STEPS1 .
($1 INBOX: from conveyor to hand
(exists in_count: int(2..input_length).
 (inbox[step-1,in_count-1] <0 /\ inbox[step-1,in_count] >= 0)/\
  (forAll i:int(1..in_count) .
       inbox[step,i] = -1)/\
  (forAll i:int((in_count+1)..input_length) .
       inbox[step,i] = inbox[step-1,i])/\
    (hand[step] = inbox[step-1,in_count])/\
     (forAll o:OUT_LEN .
       outbox[step,o] = outbox[step-1,o])/\
       (forAll r: REG_NO .
         reg[step,r] = reg[step-1,r])/\
         (action[step] = 1)
     ))
\/
($2 OUTBOX: Hand to outbox conveyor.
    (exists out_count: OUT_LEN .
        (outbox[step-1,out_count-1] >= 0 /\ outbox[step-1,out_count] <0)\/
        (outbox[step-1,output_length-1] >= 0 /\ out_count > output_length-1)\/
        (outbox[step-1,1] <0 /\ out_count<2 ) /\
        (forAll o:int(1..(out_count-1)) .
            outbox[step,o] = outbox[step-1,o])/\
        (forAll o:int((out_count+1)..output_length) .
            (outbox[step,o] = -1 )/\
            (outbox[step, out_count] = hand[step-1]))/\
    (forAll i:IN_LEN .
        (inbox[step,i] = inbox[step-1,i]))/\
    (hand[step] = hand[step-1])/\
    (forAll r: REG_NO .
        reg[step,r] = reg[step-1,r])/\
    (action[step] = 2)
      ))

\/
($3 COPY TO -  hand to register slot
  (hand[step-1]!=-1)/\  $check hand is not empty
  (exists reg_pos: REG_NO .
      (reg[step,reg_pos] = hand[step-1])/\
  (forAll r:int(1..(reg_pos-1)).
      reg[step,r] = reg[step-1,r])/\
  (forAll r:int((reg_pos+1)..num_registers).
      reg[step,r] = reg[step-1,r])/\
  (hand[step] = hand[step-1]))/\
  (forAll i:IN_LEN .
      inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
      outbox[step,o] = outbox[step-1,o])/\
      (action[step] = 3)
      )


\/
($4 COPY FROM - register slot to hand
  (exists reg_pos: REG_NO .
    (reg_pos!=-1)/\ $check reg slot is not empty
   (hand[step] = reg[step-1,reg_pos]))/\
   (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])/\
    (action[step] = 4)
      )

\/
($5 BUMP+ - register slot to hand + 1
  (exists reg_pos: REG_NO .
      (reg[step-1,reg_pos]!=-1)/\ $check that reg slot is not empty
      (hand[step] = reg[step-1,reg_pos]+1))/\
  (forAll r: REG_NO .
      reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
      inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
      outbox[step,o] = outbox[step-1,o])/\
  (action[step] = 5)
      )

\/
($6 BUMP- - register slot to hand - 1
  (exists reg_pos: REG_NO .
    (reg[step-1,reg_pos]!=-1)/\ $check that reg slot is not empty
    (hand[step] = reg[step-1,reg_pos]-1))/\
  (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
     inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])/\
    (action[step] = 6)
     )

\/
($7 ADD - register slot value to hand value and add to hand
    (exists reg_pos: REG_NO .
        ((hand[step-1]!=-1)/\(reg[step-1,reg_pos]!=-1))/\ $checks that hand nor slot are empty.
        (hand[step] = reg[step-1,reg_pos]+hand[step-1]))/\
    (forAll r: REG_NO .
        reg[step,r] = reg[step-1,r])/\
    (forAll i:IN_LEN .
        inbox[step,i] = inbox[step-1,i])/\
    (forAll o:OUT_LEN .
        outbox[step,o] = outbox[step-1,o])/\
    (action[step] = 7)
      )

\/
($8 SUB - register slot value from hand value and add to hand
  (exists reg_pos: REG_NO .
    ((reg[step-1,reg_pos]<= hand[step-1])/\(reg[step-1,reg_pos]!=-1))/\ $checks that hand nor slot are empty.
    (hand[step] = hand[step-1] - reg[step-1,reg_pos]))/\
  (forAll r: REG_NO .
     reg[step,r] = reg[step-1,r])/\
  (forAll i:IN_LEN .
    inbox[step,i] = inbox[step-1,i])/\
  (forAll o:OUT_LEN .
    outbox[step,o] = outbox[step-1,o])/\
  (action[step] = 8)
      ),
true
