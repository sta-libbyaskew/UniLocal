language ESSENCE' 1.0
$ Equidistant Frequency Permutation Arrays.
$ Details available from CP paper. 

given d              : int(1..)        $ aka d, the hamming distance between all pairs of words.
given lam            : int(1..)        $ aka lambda, the number of each symbol in a word.
given q              : int(1..)        $ aka q, the number of symbols.
given numCodeWords   : int(1..)        $ aka v

letting wordLength be lam*q

find c : matrix indexed by [int(1..numCodeWords), int(1..wordLength)] of int(1..q)

such that

$ Each codeword (row) must contain each symbol lambda times. 

forAll row : int(1..numCodeWords) .  
    gcc( c[row,..], [ i | i : int(1..q)], [ lam | i : int(1..q)] ),

$ Each pair of codewords must differ in exactly d places.

forAll row1,row2 : int(1..numCodeWords).
    (row1 < row2) -> (
        (sum i : int(1..wordLength) . (c[row1,i]!=c[row2,i])) = d),

$ Symmetry-breaking

forAll row : int(1..numCodeWords-1).
    c[row,..] <lex c[row+1,..],

forAll col : int(1..wordLength-1).
    c[..,col] <=lex c[..,col+1]


